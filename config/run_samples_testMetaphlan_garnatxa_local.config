//BASE DIRECTORIES
//para garnatxa
//basedir = "/home/mysanz/projects/cmora/pruebas_ma/"
//datadir = "/home/mysanz/ddbb/"
//condabase = "/home/mysanz/.conda/envs"

//
basedir = "/home/mangsteve/Desktop/TFM/"
datadir = "/home/mangsteve/Desktop/ddbb/"
condabase = "/home/mangsteve/miniconda3/envs/"

//INPUTS
params.raw_fastq =  "$basedir/fastq_falsos/*_{1,2}.fq.gz" //"$basedir/RawData/*_{1,2}.fq.gz"


//OUTPUTS
env.results_dir = "$basedir/Results/test1"

params.workflows.doCleanFastq = false
params.workflows.doKraken2Bracken = false
params.workflows.doHumann3 = false
params.workflows.doMetaphlan = false
params.workflows.doMultiQC = false
params.workflows.doCentrifuge = false
params.workflows.doCLARK = true


//*****************//
//      RULES      //
//*****************//

// Rule getFastQCIllumina: Quality control of input and trimmed fastq using FastQC
params.getFastQCIllumina.conda = "$condabase/fastqc-env"
params.resources.getFastQCIllumina.cpus= 4
params.resources.getFastQCIllumina.mem = "4 GB"
params.resources.getFastQCIllumina.queue = "global" //"fast"
params.resources.getFastQCIllumina.clusterOptions = "--qos=short" 
params.getFastQCIllumina.do_fastqc_raw = true
params.getFastQCIllumina.do_fastqc_trim = true
params.getFastQCIllumina.do_fastqc_trim_single = true

//Rule doTrimmomatic: trim fastq
params.doTrimmomatic.conda = "$condabase/trimmomatic-env"
params.resources.doTrimmomatic.cpus= 4
params.resources.doTrimmomatic.mem = "4 GB"
params.resources.doTrimmomatic.queue = "global" //"medium"
params.resources.doTrimmomatic.clusterOptions = "--qos=medium --time=1-00:00:00" 
params.doTrimmomatic.illuminaclip = "$datadir/Adapters-for-MGI_simpletrimming.txt:2:30:10"
params.doTrimmomatic.slidingwindow = "20:30"
params.doTrimmomatic.minlen = 75
params.doTrimmomatic.do_trim = true


//Rule alignBowtie2: align
params.alignBowtie2.conda = "$condabase/bowtie2-env"
params.resources.alignBowtie2.cpus= 12
params.resources.alignBowtie2.mem = "12 GB"
params.resources.alignBowtie2.queue = "global" 
params.resources.alignBowtie2.clusterOptions = "--qos=long" 
params.alignBowtie2.index = "$datadir/bowtie-index/GCA_000001405.15_GRCh38_full_analysis_set.fna.bowtie_index"
params.alignBowtie2.options = "--fast-local --phred33 --no-unal "


//Rule samtoolsSort: sort and index bam with human reads
params.samtoolsSort.conda = "$condabase/bowtie2-env"
params.resources.samtoolsSort.cpus= 2
params.resources.samtoolsSort.mem = "4 GB"
params.resources.samtoolsSort.queue = "global" 
params.resources.samtoolsSort.clusterOptions = "--qos=short" 

//Rule removeHumanReads
params.removeHumanReads.conda = "$condabase/seqkit-env"
params.resources.removeHumanReads.cpus= 4
params.resources.removeHumanReads.mem = "4 GB"
params.resources.removeHumanReads.queue = "global" 
params.resources.removeHumanReads.clusterOptions = "--qos=short"
params.removeHumanReads.remove_human_reads = true

//Rule callKraken2
params.callKraken2.conda = "$condabase/kraken2-env"
params.resources.callKraken2.cpus= 12
params.resources.callKraken2.mem = "80 GB"
params.resources.callKraken2.queue = "global"
params.resources.callKraken2.clusterOptions = "--qos=long-mem" //"long-mem" instead of "bigmem"
params.callKraken2.k2database = "$datadir/kraken2/k2_standard_20230605"  // k2_standard_08gb_20230605
params.callKraken2.confidence = 0.1

//Rule callBracken
params.callBracken.conda = "$condabase/bracken-env"
params.resources.callBracken.cpus= 4
params.resources.callBracken.mem = "4 GB"
params.resources.callBracken.queue = "global" 
params.resources.callBracken.clusterOptions = "--qos=medium" 
params.callBracken.threshold = 10
params.callBracken.readlen = 75

//Rule braken2mpa
params.braken2mpa.conda = "$condabase/kraken2-env"
params.resources.braken2mpa.cpus= 1
params.resources.braken2mpa.mem = "1 GB"
params.resources.braken2mpa.queue = "global" 
params.resources.braken2mpa.clusterOptions = "--qos=short" 

//Rule combineMpa
params.combineMpa.conda = "$condabase/kraken2-env"
params.resources.combineMpa.cpus= 1
params.resources.combineMpa.mem = "1 GB"
params.resources.combineMpa.queue = "global" 
params.resources.combineMpa.clusterOptions = "--qos=short"  


//Rule callKronaFromKraken2
params.callKronaFromKraken2.conda = "$condabase/krona-env"
params.resources.callKronaFromKraken2.cpus= 2
params.resources.callKronaFromKraken2.mem = "4 GB"
params.resources.callKronaFromKraken2.queue = "global" //"fast"
params.resources.callKronaFromKraken2.clusterOptions = "--qos=short"
params.resources.callKronaFromKraken2.do_krona = true

//Rule multiQC
params.multiQC.conda = "$condabase/multiqc-env"
params.resources.multiQC.cpus= 12
params.resources.multiQC.mem = "12 GB"
params.resources.multiQC.queue = "global" 
params.resources.multiQC.clusterOptions = "--qos=short" 
params.multiQC.configyaml = "$basedir/metagen1/config/multiqc_1_vero.yaml"

//Rule concatFastq
params.concatFastq.conda = "$condabase/seqkit-env" //needs pigz
params.resources.concatFastq.cpus= 4
params.resources.concatFastq.mem = "4 GB"
params.resources.concatFastq.queue = "global"
params.resources.concatFastq.clusterOptions = "--qos=medium" 

//Rule doHumann3
params.doHumann3.conda = "$condabase/humann3-env"
params.resources.doHumann3.cpus= 20
params.resources.doHumann3.mem = "100 GB"
params.resources.doHumann3.queue = "global" 
params.resources.doHumann3.clusterOptions = "--qos=long" 
params.doHumann3.bowtie2db = "/home/ysanz/.local/lib/python3.9/site-packages/metaphlan/metaphlan_databases/"
params.doHumann3.metaphlan_index = "mpa_vOct22_CHOCOPhlAnSGB_202212"

//Rule mergeHumann3
params.resources.mergeHumann3.cpus = 4
params.resources.mergeHumann3.mem = "12 GB"
params.resources.mergeHumann3.queue = "global"
params.resources.doHumann3.clusterOptions = "--qos=long" 

//Rule Metaphlan
params.doMetaphlan.conda = "$condabase/humann3-env"
params.resources.doMetaphlan.cpus = 12
params.resources.doMetaphlan.mem = "32 GB"
params.resources.doMetaphlan.queue = "global" 
params.resources.doMetaphlan.clusterOptions = "--qos=long" 
params.doMetaphlan.bowtie2db = "$datadir/metaphlan/"
params.doMetaphlan.metaphlan_index = "mpa_vJun23_CHOCOPhlAnSGB_202403_VSG"

//Rule mergeMetaphlan
params.mergeMetaphlan.conda = "$condabase/humann3-env"
params.resources.mergeMetaphlan.cpus = 4
params.resources.mergeMetaphlan.mem = "4 GB"
params.resources.mergeMetaphlan.queue = "global" 
params.resources.mergeMetaphlan.clusterOptions = "--qos=long" 

//Rule translateHumann3
params.resources.translateHumann3.cpus = 4
params.resources.translateHumann3.mem = "12 GB"
params.resources.translateHumann3.queue = "global"
params.resources.doHumann3.clusterOptions = "--qos=long" 
params.translateHumann3.cazy_db = "$datadir/humann_dbs/utility_mapping/utility_mapping/map_cazy_uniref90.txt.gz"

//Rule doCentrifuge
params.doCentrifuge.conda = "$condabase/centrifuge_env"
params.resources.doCentrifuge.cpus = 4
params.resources.doCentrifuge.mem = " 7 GB"
params.resources.doCentrifuge.queue = "global"
params.resources.doCentrifuge.clusterOptions = "--qos=long"
//params.doCentrifuge.centrifuge_db = "$datadir/centrifuge/"  // esto la carpeta taxonomy
params.doCentrifuge.centrifuge_index = "$datadir/centrifuge/p_compressed_h_v"  // esto es el archivo que generamos que estar√° en la carpeta library creo


params.doCLARK.conda = "$condabase/clark-env"  // Ruta a tu entorno Conda con CLARKK
params.resources.doCLARK.cpus = 4
params.resources.doCLARK.mem = "7 GB"
params.resources.doCLARK.queue = "global"
params.resources.doCLARK.clusterOptions = "--qos=long"
params.doCLARK.clark_db = "$datadir/centrifuge/p_compressed_h_v"



//*****************//
// GENERAL OPTIONS //
//*****************//

cleanup = false
conda.enabled = true
params.resources.default.cpus = 4
params.resources.default.mem = "8 GB"

params.mapping_tool = "bowtie2"

profiles {
    conda {
      process.conda = "$condabase/fastqc-env"
    }
}

dag {
    enabled = true
    overwrite = true
    file = "pipeline_dag.html"
}
report {
    enabled = true
    overwrite = true
    file = "report.html"
}

//process {
//  executor = "slurm"
//  queueSize = 100
//  submitRateLimit = "10sec"
//  queue = "long"
//}