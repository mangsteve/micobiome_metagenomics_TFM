//BASE DIRECTORIES
basedir = "/home/ccarlos/data/covid_persistente/"
datadir = "/home/ccarlos/data/resources"
condabase = "/home/ccarlos/anaconda3/envs"

//INPUTS
params.raw_fastq = "$basedir/recortados/*_{1,2}.fq.gz"

//OUTPUTS
env.results_dir = "$basedir/results/test2"

//DIRECTORY WITH ADDITIONAL SCRIPTS
params.scriptsdir = "$env.results_dir/RevMetCM/scripts/"


params.workflows.doCleanFastq = true
params.workflows.doKraken2Bracken = true
params.workflows.doHumann3 = false
params.workflows.doMetaphlan = true
params.workflows.doMultiQC = false


// Rule getFastQCIllumina: Quality control of input and trimmed fastq using FastQC
params.getFastQCIllumina.conda = "$condabase/fastqc-env"
params.resources.getFastQCIllumina.cpus= 4
params.resources.getFastQCIllumina.mem = "4 GB"
params.getFastQCIllumina.do_fastqc_raw = true
params.getFastQCIllumina.do_fastqc_trim = true
params.getFastQCIllumina.do_fastqc_trim_single = true

//Rule doTrimmomatic: trim fastq
params.doTrimmomatic.conda = "$condabase/trimmomatic-env"
params.resources.doTrimmomatic.cpus= 4
params.resources.doTrimmomatic.mem = "4 GB"
params.doTrimmomatic.illuminaclip = "$datadir/Adapters-for-MGI_simpletrimming.txt:2:30:10"
params.doTrimmomatic.slidingwindow = "20:30"
params.doTrimmomatic.minlen = 75
params.doTrimmomatic.do_trim = true


//Rule alignBowtie2: align
params.alignBowtie2.conda = "$condabase/bowtie2-env"
params.resources.alignBowtie2.cpus= 12
params.resources.alignBowtie2.mem = "12 GB"
params.alignBowtie2.index = "$datadir/indices/bowtie2-hg38/GCA_000001405.15_GRCh38_full_analysis_set.fna.bowtie_index"
params.alignBowtie2.options = "--fast-local --phred33 --no-unal "


//Rule samtoolsSort: sort and index bam with human reads
params.samtoolsSort.conda = "$condabase/bowtie2-env"
params.resources.samtoolsSort.cpus= 2
params.resources.samtoolsSort.mem = "1 GB"

//Rule removeHumanReads
params.removeHumanReads.conda = "$condabase/seqkit-env"
params.resources.removeHumanReads.cpus= 4
params.resources.removeHumanReads.mem = "4 GB"
params.removeHumanReads.remove_human_reads = true

//Rule callKraken2
params.callKraken2.conda = "$condabase/kraken2-env"
params.resources.callKraken2.cpus= 12
params.resources.callKraken2.mem = "12 GB"
params.callKraken2.k2database = "/home/ccarlos/data/resources/kraken2/k2_standard_08gb_20230605"
params.callKraken2.confidence = 0.1

//Rule callBracken
params.callBracken.conda = "$condabase/bracken-env"
params.resources.callBracken.cpus= 12
params.resources.callBracken.mem = "12 GB"
params.callBracken.threshold = 10
params.callBracken.readlen = 75

//Rule braken2mpa
params.braken2mpa.conda = "$condabase/kraken2-env"
params.resources.braken2mpa.cpus= 1
params.resources.braken2mpa.mem = "1 GB"

//Rule combineMpa
params.combineMpa.conda = "$condabase/kraken2-env"
params.resources.combineMpa.cpus= 1
params.resources.combineMpa.mem = "1 GB"

//Rule callKronaFromKraken2
params.callKronaFromKraken2.conda = "$condabase/krona-env"
params.resources.callKronaFromKraken2.cpus= 2
params.resources.callKronaFromKraken2.mem = "12 GB"
params.resources.callKronaFromKraken2.do_krona = true

//Rule multiQC
params.multiQC.conda = "$condabase/multiqc-env"
params.resources.multiQC.cpus= 12
params.resources.multiQC.mem = "12 GB"
params.multiQC.configyaml = "/home/ccarlos/repos/metagenomics-nf/config/multiqc_1.yaml"

//Rule concatFastq
params.concatFastq.conda = "$condabase/humann-env"
params.resources.concatFastq.cpus= 4
params.resources.concatFastq.mem = "4 GB"

//Rule doHumann3
params.doHumann3.conda = "$condabase/humann-env"
params.resources.doHumann3.cpus= 12
params.resources.doHumann3.mem = "12 GB"
params.doHumann3.bowtie2db = "$datadir/indices/bowtie2-hg38/GCA_000001405.15_GRCh38_full_analysis_set.fna.bowtie_index"
params.doHumann3.metaphlan_index = "mpa_vOct22_CHOCOPhlAnSGB_202212"
params.resources.doHumann3.do_humann = true

//Rule mergeHumann3
params.resources.mergeHumann3.cpus = 4
params.resources.mergeHumann3.mem = "1 GB"


//Rule Metaphlan
params.doMetaphlan.conda = "$condabase/humann-env"
params.resources.doMetaphlan.cpus = 4
params.resources.doMetaphlan.mem = "1 GB"
params.doMetaphlan.bowtie2db = "$datadir/metaphlan/"
params.doMetaphlan.metaphlan_index = "mpa_vOct22_CHOCOPhlAnSGB_202212"

//Rule mergeMetaphlan
params.mergeMetaphlan.conda = "$condabase/humann-env"
params.resources.mergeMetaphlan.cpus = 4
params.resources.mergeMetaphlan.mem = "1 GB"


//Rule translateHumann3
params.resources.translateHumann3.cpus = 4
params.resources.translateHumann3.mem = "1 GB"
params.translateHumann3.cazy_db = "/home/ysanz/ddbb/humann_dbs/utility_mapping/utility_mapping/map_cazy_uniref90.txt.gz"

//*****************//
// GENERAL OPTIONS //
//*****************//
cleanup = false
conda.enabled = false
params.resources.default.cpus = 4
params.resources.default.mem = "8 GB"

params.mapping_tool = "bowtie2"

profiles {
    conda {
      process.conda = "$condabase/bioinfo1"
    }
}

dag {
    enabled = true
    overwrite = true
    file = "pipeline_dag.html"
}
report {
    enabled = true
    overwrite = true
    file = "report.html"
}

//process {
//  executor = "slurm"
//  queueSize = 200
//  submitRateLimit = "10sec"
//}

// DOCKER OPTIONS
process {
    withName:doTrimmomatic{
        container = 'staphb/trimmomatic'
        containerOptions = "--mount type=bind,source=$datadir,target=$datadir"
    }
    withName:alignBowtie2 {
        container = 'nanozoo/bowtie2'
        containerOptions = "--mount type=bind,source=$datadir,target=$datadir"
    }
    withName:braken2mpa {
        container = 'ccarlos/registry:kraken_with_pigz'
    }
    withName:callBracken {
        container = 'staphb/bracken'
    }
    withName:combineMpa {
        container = 'ccarlos/registry:kraken_with_pigz'
    }
    withName:concatFastq {
        container = 'bytesco/pigz'
    }
    withName:getFastQCIllumina {
        container = 'staphb/fastqc'
    }
    withName:callKraken2 {
        container = 'ccarlos/registry:kraken_with_pigz' //without pigz: 'staphb/kraken2'
    }
    withName:callKronaFromKraken2 {
        container = 'nanozoo/krona'
    }
    withName:multiQC {
        container = 'staphb/multiqc'
    }
    withName:removeHumanReads {
        container = 'ccarlos/registry:seqkit_with_samtools ' //'staphb/seqkit'
    }
    withName:samtoolsSort {
        container = 'staphb/samtools'
    }
    withName:doHumann3 {
        container = ''
    }
    withName:translateHumann {
        container = ''
    }
    withName:mergeHumann {
        container = ''
    }
}

docker {
    enabled = true
    sudo = true
}

